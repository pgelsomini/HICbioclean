% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SpikeRemovalFunctions.R
\name{dspk.vectorize}
\alias{dspk.vectorize}
\title{Vectorize utility function}
\usage{
dspk.vectorize(Value, Data = NULL, na.strings = NULL, sup.warn = FALSE)
}
\arguments{
\item{na.strings}{allows you to handle NA values. ex: na.strings = c(-777, NA) all values of -777 will be replaced with values of NA}

\item{sup.warn}{if TRUE it will prevent warning messages}
}
\value{
A vector object of the input
}
\description{
Vector data can be processed much faster than data in a dataframe.
Can take a vector directly, a data frame and a column name or a data frame and a column number.
}
\examples{
#Data is vectorized either from vector itself, or a datatable and you can put in either the name of the column or the column number
#    ex: a <- c(1,2,3,4)
#        b <- c('a','b','c','d')
#        c <- data.frame(a,b)
#
#        dspk.vectorize(b)  #selecting the vector directly
#        > [1] 'a' 'b' 'c' 'd'
#        dspk.vectorize(Data = c, Value = 'b')  #selecting the column from a dataframe using column name
#        > [1] 'a' 'b' 'c' 'd'
#        dspk.vectorize(Data = c, Value = 2)  #selecting the column from a dataframe using column number
#        > [1] 'a' 'b' 'c' 'd'
#        WARNING: If you are trying to select a column from a dataframe but you don't places Value in quotes,
#                 and your entred value is an already existing variable, then it will vectorize that variable
#                 and ignor the given dataframe. See example below.
#        dspk.vectorize(Data = c, Value = b)  #selecting the column from a dataframe using column name
#        > [1] 'a' 'b' 'c' 'd'
}
